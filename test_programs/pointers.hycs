# describe(square inplace)
# input(3)
fun square(x: Int*): Unit {
    *x = *x * *x;
}
var k = read_int();
square(&k);
print_int(k)
# assert(9)
---
# describe(nested pointer)
var x: Int = 3;
var y: Int* = &x;
var z: Int** = &y;
var a: Int*** = &z;
***a = 5;
print_int(***a);
print_int(x);
# assert([5, 5])
---
# describe(simple function pointer)
fun pow2(x: Int): Int {
    x ** 2
}
var p = &pow2;
print_int(pow2(4));
print_int((*p)(4));
# assert([16, 16])
---
# describe(function pointer args)
fun call(x: ((Int) => Int)*, y: Int): Int {
    (*x)(y)
}
fun pow3(x: Int): Int {
    x ** 3
}
print_int(pow3(3));
print_int(call(&pow3, 3));
# assert([27, 27])
---
# describe(return function pointer)
fun make_one(): Int = 1;
fun ret_ptr(): (() => Int)* = &make_one;
print_int((*(ret_ptr()))())
# assert(1)
---
# describe(direct function pointer)
fun make_two(): Int = 2;
fun ret_ptr(): (() => Int)* = &make_two;
var p = *ret_ptr();
print_int((p)());
print_int(p());
# assert([2, 2])